services:
  # Main Django Web Service
  - type: web
    name: event-booking-api
    env: python
    plan: starter
    buildCommand: "./build.sh"
    startCommand: "gunicorn --bind 0.0.0.0:$PORT --workers 3 --timeout 120 --keep-alive 2 app.wsgi:application"
    envVars:
      - key: ENVIRONMENT
        value: production
      - key: DEBUG
        value: false
      - key: SECRET_KEY
        generateValue: true
      - key: ALLOWED_HOSTS
        value: event-booking-api.onrender.com
      - key: DB_NAME
        fromDatabase:
          name: events
          property: database
      - key: DB_USER
        fromDatabase:
          name: events
          property: user
      - key: DB_PASSWORD
        fromDatabase:
          name: events
          property: password
      - key: DB_HOST
        fromDatabase:
          name: events
          property: host
      - key: DB_PORT
        fromDatabase:
          name: events
          property: port
      - key: REDIS_URL
        fromService:
          type: redis
          name: events-redis
          property: connectionString
      - key: TICKETMASTER_API_KEY
        sync: false
      - key: EMAIL_HOST
        value: smtp.gmail.com
      - key: EMAIL_PORT
        value: 587
      - key: EMAIL_USE_TLS
        value: true
      - key: EMAIL_HOST_USER
        sync: false
      - key: EMAIL_HOST_PASSWORD
        sync: false
      - key: DEFAULT_FROM_EMAIL
        sync: false
      - key: FRONTEND_URL
        value: https://my-frontend-domain.com
      - key: CORS_ALLOWED_ORIGINS
        value: https://my-frontend-domain.com,https://event-booking-api.onrender.com
      - key: CSRF_TRUSTED_ORIGINS
        value: https://event-booking-api.onrender.com,https://my-frontend-domain.com
    healthCheckPath: /health/
    autoDeploy: true

  # PostgreSQL Database
  - type: pserv
    name: events
    env: postgres
    plan: starter
    ipAllowList: []

  # Redis Service
  - type: redis
    name: events-redis
    plan: starter
    ipAllowList: []
  